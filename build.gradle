plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'java-gradle-plugin'
}

group 'io.cloudflight.gradle'
version '0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.apache.maven:maven-artifact")
    implementation("io.github.microutils:kotlin-logging-jvm:2.1.21")

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.assertj:assertj-core")

    testImplementation("org.junit.jupiter:junit-jupiter-params")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    constraints {
        api("org.apache.maven:maven-artifact:3.5.0")
        api("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
        api("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
        api("org.assertj:assertj-core:3.22.0")
    }
}

tasks.named("compileTestKotlin").configure {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.io.path.ExperimentalPathApi"
    }
}

test {
    useJUnitPlatform()
    inputs.dir(layout.projectDirectory.dir("./src/test/fixtures"))
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
}

gradlePlugin {
    plugins {
        create("java-configure") {
            id = "io.cloudflight.autoconfigure.java-configure"
            implementationClass = "io.cloudflight.gradle.autoconfigure.java.JavaConfigurePlugin"
        }
        create("java-autoconfigure") {
            id = "io.cloudflight.autoconfigure.java-autoconfigure"
            implementationClass = "io.cloudflight.gradle.autoconfigure.java.JavaAutoconfigurePlugin"
        }
    }
}